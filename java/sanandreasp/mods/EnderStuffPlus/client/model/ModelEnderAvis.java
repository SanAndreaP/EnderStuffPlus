// Date: 25.06.2012 21:53:57
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package sanandreasp.mods.EnderStuffPlus.client.model;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.util.MathHelper;

import org.lwjgl.opengl.GL11;

public class ModelEnderAvis extends ModelBase {
	// fields
	public ModelRenderer body;
	public ModelRenderer neck;
	public ModelRenderer bodyTailM;
	public ModelRenderer bodyTailL;
	public ModelRenderer bodyTailR;
	public ModelRenderer head;
	public ModelRenderer headTailM;
	public ModelRenderer beak1;
	public ModelRenderer beak2;
	public ModelRenderer rightLeg;
	public ModelRenderer leftLeg;
	public ModelRenderer rightFoot;
	public ModelRenderer leftFoot;
	public ModelRenderer leftWingBone;
	public ModelRenderer leftWing;
	public ModelRenderer rightWingBone;
	public ModelRenderer rightWing;
	public ModelRenderer headTailL;
	public ModelRenderer headTailR;
	public ModelRenderer collar;

	public boolean isFlying = false;
	public boolean isCaped;
	public int ticksFlying = 0;
	public double motionY = 0F;
	public boolean isTamed = false;
	public boolean isSitting = false;
	public float collarClr[] = new float[3];

	public ModelEnderAvis(boolean caped) {
		this.isCaped = caped;
		
		this.textureWidth = 64;
		this.textureHeight = 32;

		this.body = new ModelRenderer(this, 0, 0);
		this.body.addBox(-4F, -3F, -8F, 8, 6, 16);
		this.body.setRotationPoint(0F, 8F, 0F);
		this.body.setTextureSize(64, 32);
		this.body.mirror = false;
		this.setRotation(this.body, 0F, 0F, 0F);
		this.neck = new ModelRenderer(this, 8, 0);
		this.neck.addBox(-1F, 0F, -1F, 2, 9, 2);
		this.neck.setRotationPoint(0F, 6F, -7F);
		this.neck.setTextureSize(64, 32);
		this.neck.mirror = false;
		this.setRotation(this.neck, -2.530727F, 0F, 0F);
		this.bodyTailM = new ModelRenderer(this, -8, 0);
		this.bodyTailM.addBox(-0.5F, 0F, 0F, 1, 0, 8);
		this.bodyTailM.setRotationPoint(0F, 5F, 8F);
		this.bodyTailM.setTextureSize(64, 32);
		this.bodyTailM.mirror = false;
		this.setRotation(this.bodyTailM, 0.5235988F, 0F, 0F);
		this.bodyTailL = new ModelRenderer(this, -8, 0);
		this.bodyTailL.addBox(0F, 0F, 0F, 1, 0, 8);
		this.bodyTailL.setRotationPoint(0F, 5F, 8F);
		this.bodyTailL.setTextureSize(64, 32);
		this.bodyTailL.mirror = false;
		this.setRotation(this.bodyTailL, 0.5235988F, 0.5235988F, 0.3490659F);
		this.bodyTailR = new ModelRenderer(this, -8, 0);
		this.bodyTailR.addBox(-1F, 0F, 0F, 1, 0, 8);
		this.bodyTailR.setRotationPoint(0F, 5F, 8F);
		this.bodyTailR.setTextureSize(64, 32);
		this.bodyTailR.mirror = false;
		this.setRotation(this.bodyTailR, 0.5235988F, -0.5235988F, -0.3490659F);
		this.head = new ModelRenderer(this, 32, 6);
		this.head.addBox(-2F, -3F, -3F, 4, 4, 6);
		this.head.setRotationPoint(0F, -1F, -12F);
		this.head.setTextureSize(64, 32);
		this.head.mirror = false;
		this.setRotation(this.head, 0F, 0F, 0F);
		this.headTailM = new ModelRenderer(this, -4, 12);
		this.headTailM.addBox(-0.5F, 0F, 4F, 1, 0, 4);
		this.headTailM.setRotationPoint(0F, -1F, -12F);
		this.headTailM.setTextureSize(64, 32);
		this.headTailM.mirror = false;
		this.setRotation(this.headTailM, 0.7853982F, 0F, 0F);
		this.beak1 = new ModelRenderer(this, 8, 12);
		this.beak1.addBox(-1F, -2F, -5F, 2, 2, 2);
		this.beak1.setRotationPoint(0F, -1F, -12F);
		this.beak1.setTextureSize(64, 32);
		this.beak1.mirror = false;
		this.setRotation(this.beak1, 0F, 0F, 0F);
		this.beak2 = new ModelRenderer(this, 6, 12);
		this.beak2.addBox(-0.5F, -1.5F, -6F, 1, 1, 1);
		this.beak2.setRotationPoint(0F, -1F, -12F);
		this.beak2.setTextureSize(64, 32);
		this.beak2.mirror = false;
		this.setRotation(this.beak2, 0F, 0F, 0F);
		this.rightLeg = new ModelRenderer(this, 2, 0);
		this.rightLeg.addBox(-0.5F, 0F, -0.5F, 1, 14, 1);
		this.rightLeg.setRotationPoint(-2F, 10F, 0F);
		this.rightLeg.setTextureSize(64, 32);
		this.rightLeg.mirror = true;
		this.setRotation(this.rightLeg, 0F, 0F, 0F);
		this.leftLeg = new ModelRenderer(this, 2, 0);
		this.leftLeg.addBox(-0.5F, 0F, -0.5F, 1, 14, 1);
		this.leftLeg.setRotationPoint(2F, 10F, 0F);
		this.leftLeg.setTextureSize(64, 32);
		this.leftLeg.mirror = false;
		this.setRotation(this.leftLeg, 0F, 0F, 0F);
		this.rightFoot = new ModelRenderer(this, 27, 0);
		this.rightFoot.addBox(-1.5F, 14F, -3F, 3, 0, 5);
		this.rightFoot.setRotationPoint(-2F, 10F, 0F);
		this.rightFoot.setTextureSize(64, 32);
		this.rightFoot.mirror = true;
		this.setRotation(this.rightFoot, 0F, 0F, 0F);
		this.leftFoot = new ModelRenderer(this, 27, 0);
		this.leftFoot.addBox(-1.5F, 14F, -3F, 3, 0, 5);
		this.leftFoot.setRotationPoint(2F, 10F, 0F);
		this.leftFoot.setTextureSize(64, 32);
		this.leftFoot.mirror = false;
		this.setRotation(this.leftFoot, 0F, 0F, 0F);
		this.leftWingBone = new ModelRenderer(this, 0, 22);
		this.leftWingBone.addBox(0F, 0F, -1F, 12, 1, 1);
		this.leftWingBone.setRotationPoint(4F, 6F, -5F);
		this.leftWingBone.setTextureSize(64, 32);
		this.leftWingBone.mirror = false;
		this.setRotation(this.leftWingBone, 0F, -1.5707963267949F, 0F);
		this.leftWing = new ModelRenderer(this, -8, 24);
		this.leftWing.addBox(-0.5F, 0.5F, 0F, 12, 0, 8);
		this.leftWing.setRotationPoint(4F, 6F, -5F);
		this.leftWing.setTextureSize(64, 32);
		this.leftWing.mirror = true;
		this.setRotation(this.leftWing, 0F, -1.5707963267949F, 0F);
		this.rightWingBone = new ModelRenderer(this, 0, 22);
		this.rightWingBone.addBox(-12F, 0F, -1F, 12, 1, 1);
		this.rightWingBone.setRotationPoint(-4F, 6F, -5F);
		this.rightWingBone.setTextureSize(64, 32);
		this.rightWingBone.mirror = false;
		this.setRotation(this.rightWingBone, 0F, 1.5707963267949F, 0F);
		this.rightWing = new ModelRenderer(this, 16, 24);
		this.rightWing.addBox(-11.5F, 0.5F, 0F, 12, 0, 8);
		this.rightWing.setRotationPoint(-4F, 6F, -5F);
		this.rightWing.setTextureSize(64, 32);
		this.rightWing.mirror = false;
		this.setRotation(this.rightWing, 0F, 1.5707963267949F, 0F);
		this.headTailL = new ModelRenderer(this, -4, 12);
		this.headTailL.addBox(-0.5F, 0F, 4F, 1, 0, 4);
		this.headTailL.setRotationPoint(0F, -1F, -12F);
		this.headTailL.setTextureSize(64, 32);
		this.headTailL.mirror = false;
		this.setRotation(this.headTailL, 0.7853982F, 0.2617994F, 0.2617994F);
		this.headTailR = new ModelRenderer(this, -4, 12);
		this.headTailR.addBox(-0.5F, 0F, 4F, 1, 0, 4);
		this.headTailR.setRotationPoint(0F, -1F, -12F);
		this.headTailR.setTextureSize(64, 32);
		this.headTailR.mirror = false;
		this.setRotation(this.headTailR, 0.7853982F, -0.2617994F, -0.2617994F);
		this.collar = new ModelRenderer(this, 38, 0);
		this.collar.addBox(-1F, 3F, -1.8F, 2, 3, 2);
		this.collar.setRotationPoint(0F, 6F, -7F);
		this.collar.setTextureSize(64, 32);
		this.collar.mirror = false;
		this.setRotation(this.collar, -2.530727F, 0F, 0F);
	}

	@Override
	public void render(Entity entity, float f, float f1, float f2, float f3,
			float f4, float f5) {
		this.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		
		float yPos = this.isSitting ? 11.5F : 0F;
		
		this.body.setRotationPoint(0F, 8F+yPos, 0F);
		this.neck.setRotationPoint(0F, 6F+yPos, -7F);
		this.bodyTailM.setRotationPoint(0F, 5F+yPos, 8F);
		this.bodyTailL.setRotationPoint(0F, 5F+yPos, 8F);
		this.bodyTailR.setRotationPoint(0F, 5F+yPos, 8F);
		this.head.setRotationPoint(0F, -1F+yPos, -12F);
		this.headTailM.setRotationPoint(0F, -1F+yPos, -12F);
		this.beak1.setRotationPoint(0F, -1F+yPos, -12F);
		this.beak2.setRotationPoint(0F, -1F+yPos, -12F);
		this.leftWingBone.setRotationPoint(4F, 6F+yPos, -5F);
		this.leftWing.setRotationPoint(4F, 6F+yPos, -5F);
		this.rightWingBone.setRotationPoint(-4F, 6F+yPos, -5F);
		this.rightWing.setRotationPoint(-4F, 6F+yPos, -5F);
		this.headTailL.setRotationPoint(0F, -1F+yPos, -12F);
		this.headTailR.setRotationPoint(0F, -1F+yPos, -12F);
		this.collar.setRotationPoint(0F, 6F+yPos, -7F+(this.isSitting ? 0.8F : 0F));
		
		this.body.render(f5);
		this.neck.render(f5);
		this.bodyTailM.render(f5);
		this.bodyTailL.render(f5);
		this.bodyTailR.render(f5);
		this.head.render(f5);
		this.headTailM.render(f5);
		this.beak1.render(f5);
		this.beak2.render(f5);
		
		if( !this.isSitting ) {
			this.rightLeg.render(f5);
			this.leftLeg.render(f5);
			this.rightFoot.render(f5);
			this.leftFoot.render(f5);
		}
		
		this.leftWingBone.render(f5);
		this.leftWing.render(f5);
		this.rightWingBone.render(f5);
		this.rightWing.render(f5);
		this.headTailL.render(f5);
		this.headTailR.render(f5);

		if( this.isTamed ) {
			GL11.glPushMatrix();
			if (entity instanceof EntityLiving
					&& ((EntityLiving) entity).hurtTime <= 0)
				GL11.glColor3f(this.collarClr[0], this.collarClr[1], this.collarClr[2]);
			GL11.glScalef(1.1F, 1.1F, 1.1F);
			this.collar.render(f5);
			GL11.glScalef(1.0F, 1.0F, 1.0F);
			GL11.glColor3f(1F, 1F, 1F);
			GL11.glPopMatrix();
		}
	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	@Override
	public void setRotationAngles(float f, float f1, float f2, float f3,
			float f4, float f5, Entity e) {
		this.head.rotateAngleY = (f3 / (180F / (float) Math.PI));
		this.head.rotateAngleX = f4 / (180F / (float) Math.PI);

		this.beak1.rotateAngleY = this.beak2.rotateAngleY = this.head.rotateAngleY;
		this.beak1.rotateAngleX = this.beak2.rotateAngleX = this.head.rotateAngleX;

		this.headTailM.rotateAngleY = this.head.rotateAngleY;
		this.headTailM.rotateAngleX = 0.7853982F + this.head.rotateAngleX;
		this.headTailL.rotateAngleY = 0.2617994F + this.head.rotateAngleY;
		this.headTailL.rotateAngleX = 0.7853982F + this.head.rotateAngleX;
		this.headTailR.rotateAngleY = -0.2617994F + this.head.rotateAngleY;
		this.headTailR.rotateAngleX = 0.7853982F + this.head.rotateAngleX;

		this.rightWingBone.rotateAngleY = 1.5707963267949F - (1.5707963267949F * (this.ticksFlying / 5F));
		this.rightWing.rotateAngleY = 1.5707963267949F - (1.5707963267949F * (this.ticksFlying / 5F));
		this.leftWingBone.rotateAngleY = -1.5707963267949F
				+ (1.5707963267949F * (this.ticksFlying / 5F));
		this.leftWing.rotateAngleY = -1.5707963267949F
				+ (1.5707963267949F * (this.ticksFlying / 5F));

		if( this.isFlying ) {
			if( this.ticksFlying >= 5 ) {
				this.rightWing.rotateAngleZ = f2 - 0.7F;
				this.leftWing.rotateAngleZ = -f2 + 0.7F;
				this.rightWingBone.rotateAngleZ = f2 - 0.7F;
				this.leftWingBone.rotateAngleZ = -f2 + 0.7F;
			}
			this.rightLeg.rotateAngleX *= 0.8F;
			this.leftLeg.rotateAngleX *= 0.8F;
			this.rightFoot.rotateAngleX *= 0.8F;
			this.leftFoot.rotateAngleX *= 0.8F;
		} else {
			this.rightWing.rotateAngleZ = 0F;
			this.rightWingBone.rotateAngleZ = 0F;
			this.leftWing.rotateAngleZ = 0F;
			this.leftWingBone.rotateAngleZ = 0F;
			this.rightLeg.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F
					* f1;
			this.leftLeg.rotateAngleX = MathHelper.cos(f * 0.6662F
					+ (float) Math.PI)
					* 1.4F * f1;
			this.rightFoot.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F
					* f1;
			this.leftFoot.rotateAngleX = MathHelper.cos(f * 0.6662F
					+ (float) Math.PI)
					* 1.4F * f1;
		}

		// this.collar.rotateAngleX = -2.530727F;
	}

}
